apiVersion: v1
kind: ConfigMap
metadata:
  name: oracle-xstream-config
  namespace: oracle
  labels:
    app: oracle
data:
  xstream-setup.sh: |
    #!/bin/bash
    # Oracle XStream Configuration with Environment Variables
    
    echo "=== Starting XStream Configuration ==="
    echo "SID: ${ORACLE_SID}, PDB: ${ORACLE_PDB}"
    echo "Admin User: ${XSTREAM_ADMIN_USER}"
    echo "Connect User: ${XSTREAM_CONNECT_USER}"
    echo "Server: ${XSTREAM_OUTBOUND_SERVER}"
    echo "Schema: ${XSTREAM_SCHEMA}"

    echo "=== Fixing Oracle Listener Service Registration ==="
    
    # Backup original listener.ora
    cp ${ORACLE_HOME}/network/admin/listener.ora ${ORACLE_HOME}/network/admin/listener.ora.bak

    # Add static service registration to fix TNS-12514 error
    echo "Adding static service registration to listener.ora"
    cat >> ${ORACLE_HOME}/network/admin/listener.ora << LISTENEREOF

    # Static service registration for Oracle XStream CDC
    # This fixes TNS-12514 "listener does not currently know of service" errors
    SID_LIST_LISTENER =
      (SID_LIST =
        (SID_DESC =
          (GLOBAL_DBNAME = ${ORACLE_SID})
          (ORACLE_HOME = ${ORACLE_HOME})
          (SID_NAME = ${ORACLE_SID})
        )
        (SID_DESC =
          (GLOBAL_DBNAME = ${ORACLE_PDB})
          (ORACLE_HOME = ${ORACLE_HOME})
          (SID_NAME = ${ORACLE_SID})
          (SERVICE_NAME = ${ORACLE_PDB})
        )
      )
    LISTENEREOF

    echo "=== Restarting Oracle Listener with Service Registration ==="
    
    # Restart listener to apply static service registration
    lsnrctl stop
    sleep 2
    lsnrctl start
    
    # Force service registration
    sqlplus / as sysdba << REGEOF
    ALTER SYSTEM REGISTER;
    EXIT;
    REGEOF

    echo "=== Verifying Listener Services ==="
    lsnrctl status

    # Generate SQL file with variable substitution
    cat > ${HOME}/xstream_setup.sql << SQLEOF
    SET ECHO ON
    SET SERVEROUTPUT ON
    WHENEVER SQLERROR CONTINUE

    PROMPT === Enable Oracle XStream ===
    -- Connect to CDB root for system-level settings
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    ALTER SYSTEM SET enable_goldengate_replication = TRUE SCOPE=BOTH;
    SHOW PARAMETER ENABLE_GOLDENGATE_REPLICATION;

    PROMPT === Configure ARCHIVELOG mode ===
    -- Archive log mode is enabled by default in the FREE edition
    SELECT log_mode FROM V\$DATABASE;

    PROMPT === Configure supplemental logging ===
    -- Enable minimal supplemental logging for entire CDB (prerequisite)
    ALTER DATABASE ADD SUPPLEMENTAL LOG DATA;
    -- Table-level supplemental logging for specific tables is enabled in later steps

    PROMPT === Configure database users ===

    PROMPT === Configure an XStream administrator (capture user) at CDB Level ===
    --Tablespace has to be created in all containers, CDB root container and PDB containers.
    PROMPT === Creating XStream Administrator Tablespace in CDB root container ===
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    DECLARE
      tablespace_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(tablespace_exists, -1543);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE TABLESPACE ${XSTREAM_ADMIN_TBS} DATAFILE ''/opt/oracle/oradata/${ORACLE_SID}/${XSTREAM_ADMIN_TBS}01.dbf'' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED';
      DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_ADMIN_TBS} created successfully');
    EXCEPTION
      WHEN tablespace_exists THEN
        DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_ADMIN_TBS} already exists - continuing');
    END;
    /

    PROMPT === Creating XStream Administrator Tablespace in PDB ===
    ALTER SESSION SET CONTAINER = ${ORACLE_PDB};
    SET SERVEROUTPUT ON;
    DECLARE
      tablespace_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(tablespace_exists, -1543);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE TABLESPACE ${XSTREAM_ADMIN_TBS} DATAFILE ''/opt/oracle/oradata/${ORACLE_SID}/${ORACLE_PDB}/${XSTREAM_ADMIN_TBS}01.dbf'' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED';
      DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_ADMIN_TBS} created successfully');
    EXCEPTION
      WHEN tablespace_exists THEN
        DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_ADMIN_TBS} already exists - continuing');
    END;
    /

    PROMPT === Create XStream administrator common user in CDB root container ===
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    DECLARE
      user_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(user_exists, -1920);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE USER ${XSTREAM_ADMIN_USER} IDENTIFIED BY "${XSTREAM_ADMIN_PWD}" DEFAULT TABLESPACE ${XSTREAM_ADMIN_TBS} QUOTA UNLIMITED ON ${XSTREAM_ADMIN_TBS} CONTAINER=ALL';
      DBMS_OUTPUT.PUT_LINE('User ${XSTREAM_ADMIN_USER} created successfully');
    EXCEPTION
      WHEN user_exists THEN
        DBMS_OUTPUT.PUT_LINE('User ${XSTREAM_ADMIN_USER} already exists - continuing');
    END;
    /

    PROMPT === Grant CREATE SESSION, SET CONTAINER privileges to XStream administrator user ===
    GRANT CREATE SESSION, SET CONTAINER TO ${XSTREAM_ADMIN_USER} CONTAINER=ALL;

    -- Disabled in 23ai, instead grant XSTREAM_CAPTURE
    -- readiness check will fail, ignore - FAILED: Database user 'C##CFLTADMIN' does not have the required XStream administrator privileges.
    -- PROMPT === Run the GRANT_ADMIN_PRIVILEGE procedure in the DBMS_XSTREAM_AUTH package ===
    -- BEGIN
    --   DBMS_XSTREAM_AUTH.GRANT_ADMIN_PRIVILEGE(
    --     grantee                 => '${XSTREAM_ADMIN_USER}',
    --     privilege_type          => 'CAPTURE',
    --     grant_select_privileges => TRUE,
    --     container               => 'ALL');
    --   DBMS_OUTPUT.PUT_LINE('Privileges granted to ${XSTREAM_ADMIN_USER}');
    -- END;
    -- /
    GRANT XSTREAM_CAPTURE TO ${XSTREAM_ADMIN_USER} CONTAINER=ALL;

    PROMPT === Create an XStream connect user ===
    -- Tablespace has to be created in all containers, CDB root container and PDB containers.
    PROMPT === Create XStream Connect Tablespace in CDB root container ===
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    DECLARE
      tablespace_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(tablespace_exists, -1543);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE TABLESPACE ${XSTREAM_TBS} DATAFILE ''/opt/oracle/oradata/${ORACLE_SID}/${XSTREAM_TBS}01.dbf'' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED';
      DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_TBS} created successfully');
    EXCEPTION
      WHEN tablespace_exists THEN
        DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_TBS} already exists - continuing');
    END;
    /

    PROMPT === Creating XStream Connect Tablespace in PDB ===
    ALTER SESSION SET CONTAINER = ${ORACLE_PDB};
    SET SERVEROUTPUT ON;
    DECLARE
      tablespace_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(tablespace_exists, -1543);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE TABLESPACE ${XSTREAM_TBS} DATAFILE ''/opt/oracle/oradata/${ORACLE_SID}/${ORACLE_PDB}/${XSTREAM_TBS}01.dbf'' SIZE 100M AUTOEXTEND ON NEXT 10M MAXSIZE UNLIMITED';
      DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_TBS} created successfully');
    EXCEPTION
      WHEN tablespace_exists THEN
        DBMS_OUTPUT.PUT_LINE('Tablespace ${XSTREAM_TBS} already exists - continuing');
    END;
    /

    PROMPT === Create an XStream connect user ===
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    DECLARE
      user_exists EXCEPTION;
      PRAGMA EXCEPTION_INIT(user_exists, -1920);
    BEGIN
      EXECUTE IMMEDIATE 'CREATE USER ${XSTREAM_CONNECT_USER} IDENTIFIED BY "${XSTREAM_CONNECT_PWD}" DEFAULT TABLESPACE ${XSTREAM_TBS} QUOTA UNLIMITED ON ${XSTREAM_TBS} CONTAINER=ALL';
      DBMS_OUTPUT.PUT_LINE('User ${XSTREAM_CONNECT_USER} created successfully');
    EXCEPTION
      WHEN user_exists THEN
        DBMS_OUTPUT.PUT_LINE('User ${XSTREAM_CONNECT_USER} already exists - continuing');
    END;
    /

    PROMPT === Grant CREATE SESSION, SET CONTAINER privileges to XStream connect user ===
    GRANT CREATE SESSION, SET CONTAINER TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;

    PROMPT === Grant SELECT_CATALOG_ROLE privileges to XStream connect user ===
    GRANT SELECT_CATALOG_ROLE TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;

    PROMPT === Create table, sequence, index, trigger, etc. ===
    GRANT CREATE TABLE, CREATE SEQUENCE, CREATE TRIGGER TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;

    PROMPT === Grant privileges to snapshot all table schema and data ===
    GRANT SELECT ANY TABLE TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;
    GRANT LOCK ANY TABLE TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;
    GRANT FLASHBACK ANY TABLE TO ${XSTREAM_CONNECT_USER} CONTAINER=ALL;

    PROMPT === Create XStream Out in root container as XStream administrator user ===
    CONNECT ${XSTREAM_ADMIN_USER}/${XSTREAM_ADMIN_PWD}@${ORACLE_SID};
    ALTER SESSION SET CONTAINER = CDB\$ROOT;
    SET SERVEROUTPUT ON;
    DECLARE
      tables  DBMS_UTILITY.UNCL_ARRAY;
      schemas DBMS_UTILITY.UNCL_ARRAY;
    BEGIN
      tables(1)  := '${XSTREAM_SCHEMA}.${XSTREAM_TABLE}';
      schemas(1) := NULL;
      DBMS_XSTREAM_ADM.CREATE_OUTBOUND(
        server_name           => '${XSTREAM_OUTBOUND_SERVER}',
        source_container_name => '${ORACLE_PDB}',
        table_names           => tables,
        schema_names          => schemas
      );
      DBMS_OUTPUT.PUT_LINE('XStream outbound server ${XSTREAM_OUTBOUND_SERVER} created for PDB ${ORACLE_PDB}');
    END;
    /

    PROMPT === Change Outbound Server to connect user ===
    BEGIN
      DBMS_XSTREAM_ADM.ALTER_OUTBOUND(
        server_name => '${XSTREAM_OUTBOUND_SERVER}',
        connect_user => '${XSTREAM_CONNECT_USER}'
      );
      DBMS_OUTPUT.PUT_LINE('XStream outbound server ${XSTREAM_OUTBOUND_SERVER} changed to connect user ${XSTREAM_CONNECT_USER}');
    END;
    /

    PROMPT === Modify capture retention time  to 7 days, default is 60 days ===
    -- Get the capture name for this outbound server
    DECLARE
      capture_name VARCHAR2(30);
    BEGIN
      SELECT capture_name INTO capture_name 
      FROM ALL_XSTREAM_OUTBOUND 
      WHERE server_name = '${XSTREAM_OUTBOUND_SERVER}';
      DBMS_OUTPUT.PUT_LINE('Outbound server Capture name: ' || capture_name);
      DBMS_CAPTURE_ADM.ALTER_CAPTURE(
        capture_name              => capture_name,
        checkpoint_retention_time => 7
      );
      DBMS_OUTPUT.PUT_LINE('Checkpoint retention time set to 7 days for capture: ' || capture_name);
    END;
    /

    PROMPT === Check database-level supplemental logging ===
    SELECT SUPPLEMENTAL_LOG_DATA_MIN, SUPPLEMENTAL_LOG_DATA_ALL FROM V\$DATABASE;
    -- Should return: SUPPLEMENTAL_LOG_DATA_MIN = YES, SUPPLEMENTAL_LOG_DATA_ALL = NO

    PROMPT === Configuration Complete ===
    SQLEOF

    # Execute the SQL
    sqlplus / as sysdba @${HOME}/xstream_setup.sql | tee ${HOME}/xstream_setup.log

    # Check if the SQL file was executed successfully
    if [ $? -ne 0 ]; then
      echo "=== XStream Setup Failed ==="
      exit 1
    fi

    echo "=== XStream Setup Complete ===" 