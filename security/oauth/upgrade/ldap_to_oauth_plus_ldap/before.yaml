apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: operator
  annotations:
    platform.confluent.io/roll-precheck: "disable"
spec:
  podTemplate:
    probe:
      liveness:
        periodSeconds: 200
        failureThreshold: 1
        timeoutSeconds: 5
      readiness:
        periodSeconds: 200
        failureThreshold: 5
        timeoutSeconds: 5
  dataVolumeCapacity: 10G
  image:
    application: confluentinc/cp-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
  authorization:
    type: rbac
    superUsers:
      - User:kafka
      - User:ssologin
  dependencies:
    mdsKafkaCluster:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
  tls:
    autoGeneratedCerts: true
  replicas: 3
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: operator
  annotations:
    platform.confluent.io/roll-precheck: "disable"
spec:
  replicas: 3
  image:
    application: confluentinc/cp-server:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  dataVolumeCapacity: 10Gi
  tls:
    autoGeneratedCerts: true
  listeners:
    internal:
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
  authorization:
    type: rbac
    superUsers:
      - User:ssologin
      - User:kafka
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        ldap:
          address: ldaps://ldap.operator.svc.cluster.local:636
          authentication:
            type: simple
            simple:
              secretRef: credential
          tls:
            enabled: true
          configurations:
            groupNameAttribute: cn
            groupObjectClass: group
            groupMemberAttribute: member
            groupMemberAttributePattern: CN=(.*),DC=test,DC=com
            groupSearchBase: dc=test,dc=com
            userNameAttribute: cn
            userMemberOfAttributePattern: CN=(.*),DC=test,DC=com
            userObjectClass: organizationalRole
            userSearchBase: dc=test,dc=com
        oidc:
          enabled: true
          clientCredentials:
            secretRef: oauth-jass-oidc
          configurations:
            groupsClaimName: profile_groups
            subClaimName: sub
            issuer: http://keycloak:8080/realms/sso_test
            jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
            authorizeBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/auth
            tokenBaseEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            refreshToken: false
  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
      clusterRef:
        name: kraftcontroller
    kafkaRest:
      authentication:
        type: bearer
        bearer:
          secretRef: rest-credential
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: operator
spec:
  kafkaClusterRef:
    name: kafka
  kafkaRest:
    authentication:
      type: bearer
      bearer:
        secretRef: rest-credential
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: operator
spec:
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  tls:
    autoGeneratedCerts: true
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.operator.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer
        bearer:
          secretRef: sr-mds-client
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: connect
  namespace: operator
spec:
  replicas: 2
  image:
    application: confluentinc/cp-server-connect:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  build:
    type: onDemand
    onDemand:
      plugins:
        locationType: confluentHub
        confluentHub:
          - name: kafka-connect-datagen
            owner: confluentinc
            version: 0.5.2
  tls:
    autoGeneratedCerts: true
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.operator.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer
        bearer:
          secretRef: connect-mds-client
      tls:
        enabled: true
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: operator
spec:
  configOverrides:
    server:
      - confluent.controlcenter.armeria.healthcheck.force.http1=true
      - control.center.replication.factor=3
      - control.center.internal.topics.replication.factor=3
  replicas: 1
  podTemplate:
    probe:
      liveness:
        periodSeconds: 200
        failureThreshold: 1
        timeoutSeconds: 5
      readiness:
        periodSeconds: 200
        failureThreshold: 5
        timeoutSeconds: 5
  image:
    application: confluentinc/cp-enterprise-control-center:7.8.0
    init: confluentinc/confluent-init-container:2.10.0
  dataVolumeCapacity: 10Gi
  authorization:
    type: rbac
  tls:
    autoGeneratedCerts: true
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
    mds:
      ssoProtocol: oidc
      endpoint: https://kafka.operator.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: bearer
        bearer:
          secretRef: mds-client-c3
      tls:
        enabled: true
    connect:
      - name: connect
        url:  https://connect.operator.svc.cluster.local:8083
        tls:
          enabled: true
    schemaRegistry:
      url: https://schemaregistry.operator.svc.cluster.local:8081
      tls:
        enabled: true
---
# rolebinding `testuser1-cfrb-kafka` allows `testuser1` to see kafka cluster
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-cfrb-kafka
  namespace: operator
spec:
  principal:
    name: ec789832-5a20-4724-94ba-f56aa05c5654 # corresponding sub from keycloak against testuser1
    type: user
  role: ClusterAdmin
---
# rolebinding `testuser1-rb-connect` allows `testuser1` to see connect cluster
# `connectClusterId` pattern: `<namespace>.<connect.name>`
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-rb-connect
  namespace: operator
spec:
  principal:
    type: user
    name: ec789832-5a20-4724-94ba-f56aa05c5654
  clustersScopeByIds:
    connectClusterId: operator.connect
  role: ClusterAdmin
  ## if use other kafkaRestClass except for default, need to configure accordingly
  #kafkaRestClassRef:
  # name: default
---
---
# rolebinding `testuser1-rb-sr` allows `testuser1` to see schemaregistry information
# `schemaRegistryCllusterId` pattern: `id_<schemaregistry.name>_<namespace>`
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-rb-sr
  namespace: operator
spec:
  principal:
    type: user
    name: ec789832-5a20-4724-94ba-f56aa05c5654
  clustersScopeByIds:
    schemaRegistryClusterId: id_schemaregistry_operator
  role: SystemAdmin
---
# rolebinding `testuser1-rb-ksql` allows `testuser1` to see ksqldb cluster
# `ksqlClusterId` pattern: `<namespace>.<ksqldb.name>`
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-rb-ksql
  namespace: operator
spec:
  principal:
    type: user
    name: ec789832-5a20-4724-94ba-f56aa05c5654
  clustersScopeByIds:
    ksqlClusterId: operator.ksqldb_
  role: ResourceOwner
  resourcePatterns:
    - name: ksql-cluster
      patternType: LITERAL
      resourceType: KsqlCluster
  ## if use other kafkaRestClass except for default, need to configure accordingly
  #kafkaRestClassRef:
  # name: default
