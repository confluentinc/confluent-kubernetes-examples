apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: operator
spec:
  mountedVolumes:
    volumes:
      - name: customtruststore
        secret:
          secretName: mycustomtruststore
    volumeMounts:
      - name: customtruststore
        mountPath: /mnt/jvmtruststore
  # Truststore containing CA cert for self signed IDP
  configOverrides:
    jvm:
      - "-Djavax.net.ssl.trustStore=/mnt/jvmtruststore/truststore.jks"
      - "-Djavax.net.ssl.trustStorePassword=mystorepassword"
      - "-Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=*"
    server:
      - confluent.metadata.server.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - confluent.metadata.server.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - confluent.metadata.server.ssl.endpoint.identification.algorithm=https
  dataVolumeCapacity: 10G
  image:
    application: confluentinc/cp-server:8.0.0
    init: confluentinc/confluent-init-container:3.0.0
    pullSecretRef:
      - confluent-registry
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: oauth
        oauthSettings:
          groupsClaimName: groups
          expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
          jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
          subClaimName: client_id
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
  authorization:
    type: rbac
    superUsers:
      - User:operator # required: default user corresponding to replication listener in kafka, ow will get topic authorization error
      - User:kafka
      - User:ssologin
      - User:private-key-client
  dependencies:
    mdsKafkaCluster:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9073
      authentication:
        type: oauth
        jaasConfig:
          secretRef: oauth-jass
        oauthSettings:
          groupsClaimName: groups
          expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
          jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
      tls:
        enabled: true
  tls:
    autoGeneratedCerts: true
  replicas: 3
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: operator
spec:
  mountedVolumes:
    volumes:
      - name: customtruststore
        secret:
          secretName: mycustomtruststore
    volumeMounts:
      - name: customtruststore
        mountPath: /mnt/jvmtruststore
  # Truststore containing CA cert for self signed IDP
  configOverrides:
    jvm:
      - "-Djavax.net.ssl.trustStore=/mnt/jvmtruststore/truststore.jks"
      - "-Djavax.net.ssl.trustStorePassword=mystorepassword"
      - "-Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=*"
  replicas: 3
  image:
    application: confluentinc/cp-server:8.0.0
    init: confluentinc/confluent-init-container:3.0.0
    pullSecretRef:
      - confluent-registry
  dataVolumeCapacity: 10Gi
  tls:
    autoGeneratedCerts: true
  listeners:
    internal:
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
      tls:
        enabled: true
  authorization:
    type: rbac
    superUsers:
      - User:ssologin
      - User:kafka
      - User:private-key-client
  services:
    mds:
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: mds-token
      provider:
        oauth:
          configurations:
            expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
            jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: oauth
          oauthSettings:
            groupsClaimName: groups
            expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
            jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
            tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
            clientAssertion:
              clientId: private-key-client
              localClientAssertion:
                issuer: private-key-client
                subject: private-key-client
                audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
                privateKeyFile:
                  secretRef: private-key
                includeJtiClaim: true
      clusterRef:
        name: kraftcontroller
    kafkaRest:
      authentication:
        type: oauth
        oauthSettings:
          groupsClaimName: groups
          expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
          jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: operator
spec:
  kafkaRest:
    authentication:
      type: oauth
      oauth:
        configuration:
          tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
    tls:
      secretRef: cacert
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: operator
spec:
  mountedVolumes:
    volumes:
      - name: customtruststore
        secret:
          secretName: mycustomtruststore
    volumeMounts:
      - name: customtruststore
        mountPath: /mnt/jvmtruststore
  # Truststore containing CA cert for self signed IDP
  configOverrides:
    jvm:
      - "-Djavax.net.ssl.trustStore=/mnt/jvmtruststore/truststore.jks"
      - "-Djavax.net.ssl.trustStorePassword=mystorepassword"
      - "-Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=*"
    server:
      - confluent.metadata.server.ssl.truststore.location=/mnt/sslcerts/truststore.jks
      - confluent.metadata.server.ssl.truststore.password=${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
      - confluent.metadata.server.ssl.endpoint.identification.algorithm=https
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:8.0.0
    init: confluentinc/confluent-init-container:3.0.0
    pullSecretRef:
      - confluent-registry
  tls:
    autoGeneratedCerts: true
  authorization:
    type: rbac
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.operator.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-token
      authentication:
        type: oauth
        oauth:
          configuration:
            groupsClaimName: groups
            tokenEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
            expectedIssuer: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test
            jwksEndpointUri: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/certs
            subClaimName: client_id
            clientAssertion:
              clientId: private-key-client
              localClientAssertion:
                issuer: private-key-client
                subject: private-key-client
                audience: https://keycloak.operator.svc.cluster.local:8443/realms/sso_test/protocol/openid-connect/token
                privateKeyFile:
                  secretRef: private-key
                includeJtiClaim: true
      tls:
        enabled: true
---
# rolebinding `testuser1-cfrb-kafka` allows `testuser1` to see kafka cluster
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-cfrb-kafka
  namespace: operator
spec:
  principal:
    name: 86cc03ce-f0cd-41b0-b701-29db6d23b2af # corresponding sub from keycloak against testuser1
    type: user
  role: ClusterAdmin
---
# rolebinding `testuser1-rb-sr` allows `testuser1` to see schemaregistry information
# `schemaRegistryCllusterId` pattern: `id_<schemaregistry.name>_<namespace>`
apiVersion: platform.confluent.io/v1beta1
kind: ConfluentRolebinding
metadata:
  name: testuser1-rb-sr
  namespace: operator
spec:
  principal:
    type: user
    name: 86cc03ce-f0cd-41b0-b701-29db6d23b2af
  clustersScopeByIds:
    schemaRegistryClusterId: id_schemaregistry_operator
  role: SystemAdmin