apiVersion: platform.confluent.io/v1beta1
kind: KRaftController
metadata:
  name: kraftcontroller
  namespace: operator
spec:
  dataVolumeCapacity: 10G
  image:
    application: confluentinc/cp-server:8.0.0
    init: confluentinc/confluent-init-container:2.10.1
    pullSecretRef:
      - confluent-registry
  listeners:
    controller:
      tls:
        enabled: true
      authentication:
        type: plain
        jaasConfig:
          secretRef: credential
  tls:
    autoGeneratedCerts: true
  replicas: 3
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: operator
spec:
  dataVolumeCapacity: 10G
  image:
    application: confluentinc/cp-server:8.0.0
    init: docker.io/confluentinc/confluent-init-container:2.10.1
    pullSecretRef:
      - confluent-registry
  tls:
    autoGeneratedCerts: true
  replicas: 3
  listeners:
    internal:
      authentication:
        type: oauth
        oauthSettings:
          groupsClaimName: groups
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
      tls:
        enabled: true
    replication:
      authentication:
        type: oauth
        oauthSettings:
          groupsClaimName: groups
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
      tls:
        enabled: true
  dependencies:
    kRaftController:
      controllerListener:
        tls:
          enabled: true
        authentication:
          type: plain
          jaasConfig:
            secretRef: credential
      clusterRef:
        name: kraftcontroller
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaTopic
metadata:
  name: topic-a
  namespace: operator
spec:
  replicas: 1
  partitionCount: 12
  configs:
    cleanup.policy: "compact"
  kafkaClusterRef:
    name: kafka
  kafkaRest:
    authentication:
      type: oauth
      oauth:
        configuration:
          jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          expectedIssuer: http://keycloak:8080/realms/sso_test
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key-encrypted-v2
                encryptedPrivateKey: true
              includeJtiClaim: true
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: operator
spec:
  replicas: 1
  image:
    application: confluentinc/cp-schema-registry:8.0.0
    init: confluentinc/confluent-init-container:2.10.1
    pullSecretRef:
      - confluent-registry
  tls:
    autoGeneratedCerts: true
  authentication:
    type: oauth
    oauth:
      configuration:
        groupsClaimName: groups
        expectedIssuer: http://keycloak:8080/realms/sso_test
        jwksEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/certs
        tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
        clientAssertion:
          clientId: private-key-client
          localClientAssertion:
            issuer: private-key-client
            subject: private-key-client
            audience: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
            privateKeyFile:
              secretRef: private-key
            includeJtiClaim: true
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.operator.svc.cluster.local:9071
      authentication:
        type: oauth
        oauthSettings:
          tokenEndpointUri: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
          clientAssertion:
            clientId: private-key-client
            localClientAssertion:
              issuer: private-key-client
              subject: private-key-client
              audience: http://keycloak:8080/realms/sso_test/protocol/openid-connect/token
              privateKeyFile:
                secretRef: private-key
              includeJtiClaim: true
      tls:
        enabled: true
  enableSchemaExporter: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Schema
metadata:
  name: test-schema
  namespace: operator
spec:
  data:
    format: avro
    configRef: schema-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: schema-config
  namespace: operator
data:
  schema: |
    {
      "namespace": "io.confluent.examples.clients.basicavro",
      "type": "record",
      "name": "Payment",
      "fields": [
        {"name": "id", "type": "string"},
        {"name": "amount", "type": "double"},
        {"name": "email", "type": "string"}
      ]
    }
---
